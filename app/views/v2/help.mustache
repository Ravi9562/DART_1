{{! Copyright (c) 2017, the Dart project authors.  Please see the AUTHORS file
    for details. All rights reserved. Use of this source code is governed by a
    BSD-style license that can be found in the LICENSE file. }}
<div style="max-width: 600px">
  <h2 id="search">Search</h2>
  <p>We support the following search expressions:</p>
  <ul>
    <li><code>"exact phrases"</code> - normally we return results with similar phrases, but putting it inside quotes makes sure that we return only results that have the expression in that form somewhere.</li>
    <li><code>package:prefix</code> - return only packages that begin with <code>prefix</code>. Useful to search for packages of the same framework.</li>
    <li><code>dependency:package_name</code> - return only packages that reference <code>package_name</code> in their pubspec</li>
    <li><code>dependency*:package_name</code> - return only packages that depend on <code>package_name</code> (direct, dev or transitive dependencies)</li>
  </ul>
  <h2 id="scoring">Scoring</h2>
  <p>
    We calculate <a href="#popularity">popularity</a>, <a href="#health">health</a> and
    <a href="#maintenance">maintenance</a> scores independently, and combine them into
    an <a href="#overall-score">overall score</a>. The score you see in the colored circle
    is always this overall score.
  </p>

  <h3 id="popularity">Popularity</h3>
  <p>
    Popularity score is good proxy for a package's use, derived from download statistics.
    It is based on actual download counts, but compensated for automated tools (like
    continuous builds fetching the package on each change request).
  </p>

  <p><i>How can you improve your popularity score?</i></p>
  <p>Create useful packages that others needs and love to use.</p>

  <h3 id="health">Health</h3>
  <p>
    The code health score is based on the static analysis of the package with <code>dartanalyzer</code>.
  </p>
  <p><i>How can you improve your health score?</i></p>
  <p>Use strong-mode checks and some linter rules, and make sure you fix all the warnings and errors before publishing. An example <code>analysis_options.yaml</code>:</p>
  <pre><code class="language-yaml"># https://www.dartlang.org/guides/language/analysis-options
analyzer:
  strong-mode: true

# Source of linter options:
# http://dart-lang.github.io/linter/lints/options/options.html
linter:
  rules:
    - camel_case_types
    - hash_and_equals
    - iterable_contains_unrelated_type
    - list_remove_unrelated_type
    - unrelated_type_equality_checks
    - valid_regexps
  </code></pre>

  <h3 id="maintenance">Maintenance</h3>

  <p>
    Maintenance score reflects how tidy and up-to-date a package is.
    Some of aspects that influence the score:
  </p>
  <ul>
    <li>Last publish date: a package starts to lose score a year its last publish data.</li>
    <li>Up-to-date dependencies: great if all of the dependencies are on the latest version.</li>
    <li>Readme, changelog and example files.</li>
    <li><code>analysis_options.yaml</code> with strong-mode enabled.</li>
  </ul>

  <p><i>How can you improve your maintenance score?</i></p>
  <p>
    Follow the suggestions on the analysis tab on the package page, or
    run <a href="https://pub.dartlang.org/packages/pana">pana</a> manually
    to check these before publishing.
  </p>

  <h3 id="overall-score">Overall score</h3>
  <p>
    The overall score is the combination of <a href="#popularity">popularity</a>,
    <a href="#health">health</a> and <a href="#maintenance">maintenance</a>.
  </p>

  <h2 id="ranking">Ranking</h2>
  <p>
    We use the overall score to sort packages in default listings. When searching,
    the overall score is combined with the text match relevancy score, and their
    composite score will be used for sorting.
  </p>
  <p>
    We are always displaying the package's overall score at the side of the results,
    regardless of which sort order is applied on it.
  </p>
</div>

<script src="/static/highlight.pack.js"></script>
<script>hljs.initHighlightingOnLoad();</script>
