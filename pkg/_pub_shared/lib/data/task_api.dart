// Copyright (c) 2019, the Dart project authors.  Please see the AUTHORS file
// for details. All rights reserved. Use of this source code is governed by a
// BSD-style license that can be found in the LICENSE file.

import 'package:json_annotation/json_annotation.dart';
import 'package_api.dart' show UploadInfo;

part 'task_api.g.dart';

/// Response with signed URLs for uploading task results.
///
/// It is important that files are uploaded in the order specified in
/// documentation. The big files [dartdocBlob] and [panaLog] will be uploaded
/// to unique filenames containing a unique identifier. This identifier should
/// be embedded in the [dartdocIndex] and [panaReport] files, these files are
/// much smaller and uploaded to well-known locations.
///
/// This gives us some atomicity when uploading results, until the dartdoc index
/// file is uploaded, we will keep using the old dartdoc blob file.
@JsonSerializable()
class UploadTaskResultResponse {
  /// Identifier for the [blob] file which should be written into the
  /// [index] file.
  final String blobId;

  /// [UploadInfo] for uploading the blob file.
  ///
  /// The blob file is a concatenation of all files generated by the task.
  /// The [index] file will hold an index of filenames and offsets into this
  /// blob. This way we can upload a lot of files in two steps.
  final UploadInfo blob;

  /// [UploadInfo] for uploading the index file for the [blob] file.
  ///
  /// This should embed the [blobId], which points to the [blob] file.
  final UploadInfo index;

  // json_serializable boiler-plate
  UploadTaskResultResponse({
    required this.blobId,
    required this.blob,
    required this.index,
  });
  factory UploadTaskResultResponse.fromJson(Map<String, dynamic> json) =>
      _$UploadTaskResultResponseFromJson(json);
  Map<String, dynamic> toJson() => _$UploadTaskResultResponseToJson(this);
}
